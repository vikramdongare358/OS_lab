

CODE:    -> Seperate header file to store Process    class   and other basic utility functions

#include<bits/stdc++.h>
using namespace std;
class Process {
public:
int at, bt, ct, tat, wt, rt, priority, pid;
Process(int pid, int bt, int priority) {
1
this->at = at;
this->bt = bt;
this->pid = pid;
ct = 0;
tat = 0;
wt = 0;
rt = bt;
}
Process() {
at = 0;
bt = 0;
ct = 0;
tat = 0;
wt = 0;
rt = bt;
priority = 0;
}
};
void printTabular(vector<Process> &processes)
{
cout << endl
<< endl;
cout << "pid\t"
<< "at\t"
<< "bt\t"
<< "ct\t"
2
<< "wt\t"
<< "tat\t" << "rt\t" << endl;
for (int i = 0; i < processes.size(); i++)
{
cout << processes[i].pid << '\t' << processes[i].at << '\t' <<
processes[i].bt << '\t' << processes[i].ct << '\t' << processes[i].wt <<
'\t' << processes[i].tat << '\t' << processes[i].rt << endl;
}
}
void avg_wt(vector<Process> &v) {
double avgwt = 0;
for (auto &p : v) {
avgwt+=(double)p.wt/v.size();
}
cout << "Average Waiting Time : " << avgwt << endl;
}
void avg_tat(vector<Process> &v) {
double avgtat = 0;
for (auto &p : v) {
avgtat+=(double)p.tat/v.size();
}
cout << "Average Turn Around Time : " << avgtat << endl;
}

->> the maincode

#include <bits/stdc++.h>
include "utils.h"
using namespace std;
// Assume 0 AT
// 0 Context Switching
// Three Levels Are :
// First -> Priority Based Scheduling
// Second -> Round Robin
// Third -> FCFS
class MultiLvlQ {
public:
static vector<Process>PBS(vector<Process> process, int st, int tq,
vector<Process> &solution) {
sort(process.begin(), process.end(), [](Process &a, Process &b)
{return a.priority > b.priority;});
int t = st, i = 0;
while (t < st+tq) {
if (i >= process.size()) break;
Process &curr = process[i];
cout << "|P" << curr.pid << "|";
if (t+curr.rt <= st+tq) {
curr.ct = t+curr.rt;
t+=curr.rt;
curr.rt = 0;
solution.push_back(curr);
cout << "->" << t << "->";
} else {
4
curr.rt = (t+curr.rt)-(st+tq);
t = st+tq;
cout << "->" << t << "->";
break;
}
i++;
}
return vector<Process>(process.begin()+i, process.end());
}
static vector<Process> RoundRobin(vector<Process> process, int st, int
tq, int tqrr, vector<Process> &solution) {
queue<Process> q;
for (int i = 0; i < process.size(); i++) {
q.push(process[i]);
}
int t = st;
while (t <= st+tq) {
if (q.empty()) break;
Process curr = q.front();
cout << "|P" << curr.pid << "|";
q.pop();
if (curr.rt <= tqrr) {
if (t + curr.rt <= st+tq) {
curr.ct = t+curr.rt;
t+=curr.rt;
curr.rt = 0;
solution.push_back(curr);
cout << "->" << t << "->";
5
} else {
curr.rt = (t+curr.rt) - (tq+st);
t = st+tq;
q.push(curr);
cout << "->" << t << "->";
break;
}
} else {
if (t + tqrr <= st+tq) {
curr.rt = curr.rt-tqrr;
t+=tqrr;
q.push(curr);
cout << "->" << t << "->";
} else {
curr.rt = (t+curr.rt) - (tq+st);
t = st+tq;
q.push(curr);
cout << "->" << t << "->";
break;
}
}
}
vector<Process> left;
while (!q.empty()) {
Process curr = q.front();
q.pop();
left.push_back(curr);
6
}
return left;
}
static vector<Process> FCFS(vector<Process> process, int st, int tq,
vector<Process> &sln) {
sort(process.begin(), process.end(), [](Process &a, Process &b)
{return a.pid < b.pid;});
int t = st, i = 0;
while (t < st+tq) {
if (i >= process.size()) break;
Process &curr = process[i];
cout << "|P" << curr.pid << "|";
if (t+curr.rt <= st+tq) {
curr.ct = t+curr.rt;
t+=curr.rt;
curr.rt = 0;
sln.push_back(curr);
cout << "->" << t << "->";
} else {
curr.rt = curr.rt+t - (st+tq);
t = st+tq;
cout << "->" << t << "->";
break;
}
i++;
}
return vector<Process> (process.begin()+i, process.end());
}
7
};
int main()
{
ios::sync_with_stdio(0);cin.tie(0);
int n;
cout << "Enter the Number of Processes : " << endl;
cin >> n;
vector<Process> processes(n);
cout << "assuming AT to be 0, Please Enter ProcessID, Burst Time  and Priority" << endl;

cout << "pid\tbt\tpriority" << endl;
for (int i = 0; i < n; i++) {
cin >> processes[i].pid >> processes[i].bt >>
processes[i].priority;
processes[i].rt = processes[i].bt;
// cout << processes[i].pid << ' ' << processes[i].at << ' '<<
processes[i].bt << ' '<< processes[i].ct << ' '<< processes[i].wt << ' '<<
processes[i].tat << endl;
}
cout << endl << endl;
int tqp, tqr, tqf;
8
cout << "Please Enter the Time Quanta for Priority Scheduling, Round Robin and FCFS respectively" << endl;

cin >> tqp >> tqr >> tqf;
int tqrr, t = 0;
cout << "Please Enter the Time Quanta for Round Robin Scheduling itself" << endl;
cin >> tqrr;
vector<Process> solutionVector;
MultiLvlQ q;
cout << "Gantt Chart : " << endl;
cout << 0 << "->";
while (processes.size() != 0) {
processes = q.PBS(processes, t, tqp, solutionVector);
t+=tqp;
if (processes.empty()) {
break;
}
processes = q.RoundRobin(processes, t, tqr, tqrr, solutionVector);
t+=tqr;
if (processes.empty()) {
break;
}
processes = q.FCFS(processes, t, tqf, solutionVector);
t+=tqf;
}
9
cout << "end" << endl;;
cout << "pid\tat\tbt\tct\twt\ttat" << endl;
for (int i = 0; i < solutionVector.size(); i++) {
solutionVector[i].tat = solutionVector[i].ct-solutionVector[i].at;
solutionVector[i].wt = solutionVector[i].tat-solutionVector[i].bt;
cout << solutionVector[i].pid << '\t' << solutionVector[i].at <<
'\t'<< solutionVector[i].bt << '\t'<< solutionVector[i].ct << '\t'<<
solutionVector[i].wt << '\t'<< solutionVector[i].tat << endl;
}
avg_tat(solutionVector);
avg_wt(solutionVector);
return 0;
}

Screenshot output:
 


